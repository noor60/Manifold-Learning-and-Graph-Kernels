# -*- coding: utf-8 -*-
"""part_2_ppi.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wW_qWcdaWuXCl8zqRlQ3iC6oAoK1gjTN
"""

pip install grakel



from grakel.kernels import ShortestPath
sp_kernel = ShortestPath()
sp_kernel = ShortestPath(normalize=True)
from grakel import GraphKernel
from grakel import Graph
import csv
import numpy as np
from grakel.kernels import WeisfeilerLehman, VertexHistogram
wl_kernel = WeisfeilerLehman(n_iter=5, normalize=True, base_graph_kernel=VertexHistogram)

def graph_creation(i):
 listt=[]
 with open('/content/graph'+str(i)+'.csv') as csv_file:
    csv_reader = csv.reader(csv_file, delimiter=',')
    for row in csv_reader:
        listt.append(row)
    
    #//convertngomtp int
    for i in listt:
     index = listt.index(i)
     listt[index] = list(map(int, listt[index]))

 return listt

def node_labels(i):
    dict = {}
    count=0
    with open('/content/'+str(i)+'.csv') as csv_file:
     csv_reader = csv.reader(csv_file, delimiter=',')
    
     for row in csv_reader:
        a = ' '.join(map(str, row))
        dict[count]=a
        count +=1
    
    return dict

Y= ['1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2']

GL=[]
for i in range(1,87):
    adj=graph_creation(i);
    label=node_labels(i)
    label[0]='0' 
    G = Graph(initialization_object=adj, node_labels = label)
    GL.append(G)
    k=sp_kernel.fit_transform([G])



sp_kernel = ShortestPath(normalize=True)
K = sp_kernel . fit_transform ( GL)

n=15

from sklearn import (manifold, datasets, decomposition, ensemble,
                     discriminant_analysis, random_projection, neighbors)

clf = manifold.LocallyLinearEmbedding(n_neighbors=n, n_components=2, method='standard') . fit ( K )

print("Done. Reconstruction error: %g" % clf.reconstruction_error_)